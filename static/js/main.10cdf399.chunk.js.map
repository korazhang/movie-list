{"version":3,"sources":["features/movieList/MovieListContainer.module.css","features/movieList/MovieListSlice.js","features/movieList/MovieListTemplate.js","features/movieList/MovieListContainer.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","fetchData","createAsyncThunk","a","axios","get","response","data","movieListSlice","createSlice","name","initialState","myList","recommendation","reducers","getInitData","state","action","payload","mylist","recommendations","removeItem","filter","list","id","addItem","extraReducers","fulfilled","pending","console","log","rejected","actions","getMyList","movieList","getRecommendation","MovieListTemplate","props","handleClick","lsitName","dispatch","useDispatch","map","movie","className","styles","imgListContainer","src","img","alt","title","imgContainer","movieTtile","onClick","actionButton","MovieListContainer","useSelector","recommendataion","useEffect","row","icon","label","App","store","configureStore","reducer","movieListReducer","middleware","getDefaultMiddleware","serializableCheck","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.10cdf399.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"MovieListContainer_icon__3hGfT\",\"row\":\"MovieListContainer_row__1BfaK\",\"container\":\"MovieListContainer_container__3jBA3\",\"imgListContainer\":\"MovieListContainer_imgListContainer__1Rqwi\",\"movieTtile\":\"MovieListContainer_movieTtile__2gcK6\",\"label\":\"MovieListContainer_label__OJYJy\",\"actionButton\":\"MovieListContainer_actionButton__2vWCJ\"};","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst initialState = {\n  myList: [],\n  recommendation: [],\n};\n\nexport const fetchData = createAsyncThunk(\"movieList/fetchData\", async () => {\n  const response = await axios.get(\"data.json\");\n  return response.data;\n});\n\nexport const movieListSlice = createSlice({\n  name: \"movieList\",\n  initialState,\n  reducers: {\n    getInitData: (state, action) => {\n      state.myList = action.payload.mylist;\n      state.recommendation = action.payload.recommendations;\n    },\n    removeItem: (state, action) => {\n      state.myList = state.myList.filter(\n        (list) => list.id !== action.payload.id\n      );\n      state.recommendation = [...state.recommendation, action.payload];\n    },\n    addItem: (state, action) => {\n      state.myList = [...state.myList, action.payload];\n      state.recommendation = state.recommendation.filter(\n        (list) => list.id !== action.payload.id\n      );\n    },\n  },\n  extraReducers: {\n    [fetchData.fulfilled]: (state, action) => {\n      state.myList = action.payload.mylist;\n      state.recommendation = action.payload.recommendations;\n    },\n    [fetchData.pending]: () => {\n      console.log(\"pending\");\n    },\n    [fetchData.rejected]: () => {\n      console.log(\"reject\");\n    },\n  },\n});\nexport const { removeItem, addItem } = movieListSlice.actions;\n\nexport const getMyList = (state) => state.movieList.myList;\n\nexport const getRecommendation = (state) => state.movieList.recommendation;\n\nexport default movieListSlice.reducer;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport styles from \"./MovieListContainer.module.css\";\n\nexport default function MovieListTemplate(props) {\n  const { movieList, handleClick, lsitName } = props;\n  const dispatch = useDispatch();\n\n  return movieList.map((movie) => (\n    <div key={movie.id} className={styles.imgListContainer}>\n      <img src={movie.img} alt={movie.title} className={styles.imgContainer} />\n      <label className={styles.movieTtile}>{movie.title}</label>\n      <button\n        onClick={() => dispatch(handleClick(movie))}\n        className={styles.actionButton}\n      >\n        {lsitName === \"myList\" ? \"Remove\" : \"Add\"}\n      </button>\n    </div>\n  ));\n}\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  fetchData,\n  removeItem,\n  addItem,\n  getMyList,\n  getRecommendation,\n} from \"./MovieListSlice\";\nimport MovieListTemplate from \"./MovieListTemplate\";\n\nimport styles from \"./MovieListContainer.module.css\";\n\nexport function MovieListContainer() {\n  const myList = useSelector(getMyList);\n  const recommendataion = useSelector(getRecommendation);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchData());\n  }, []);\n\n  return (\n    <div>\n      <div className={styles.row}>\n        <img className={styles.icon} src=\"netflix.png\" />\n      </div>\n      <div className={styles.row}>\n        <label className={styles.label}>My List</label>\n      </div>\n      <div className={styles.row}>\n        <MovieListTemplate\n          handleClick={removeItem}\n          movieList={myList}\n          lsitName={\"myList\"}\n        />\n      </div>\n      <div className={styles.row}>\n        <label className={styles.label}>Recommendataion</label>\n      </div>\n      <div className={styles.row}>\n        <MovieListTemplate\n          handleClick={addItem}\n          movieList={recommendataion}\n          lsitName={\"recommendataion\"}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { MovieListContainer } from \"./features/movieList/MovieListContainer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MovieListContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\n\nimport movieListReducer from \"../features/movieList/MovieListSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    movieList: movieListReducer,\n  },\n  middleware: getDefaultMiddleware({\n    serializableCheck: false,\n  }),\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}